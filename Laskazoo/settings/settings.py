"""
Django settings for Laskazoo project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from decouple import config

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")
DEBUG = config("DEBUG", default=False, cast=bool)
API_KEY = config("API_KEY", default="stub")


ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'Laskazoo',
    'apps.products',
    'apps.users',
    'apps.orders',
    'apps.favourites',
    'apps.ts_ftps',
    'apps.manager',
    'django.contrib.sitemaps',
    
    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

SITE_ID = 1

TS_SYNC = {
    "MODE": os.getenv("TS_MODE", "ftps"),     # ftps | ftp | local
    "FTP": {
        "HOST": os.getenv("TS_FTP_HOST", ""),
        "PORT": int(os.getenv("TS_FTP_PORT", "21")),
        "USER": os.getenv("TS_FTP_USER", ""),
        "PASS": os.getenv("TS_FTP_PASS", ""),
        "INCOMING_DIR": os.getenv("TS_FTP_INCOMING_DIR", "/incoming"),
        "PASSIVE": os.getenv("TS_FTP_PASSIVE", "true").lower() in ("1","true","yes"),
        "TIMEOUT": int(os.getenv("TS_FTP_TIMEOUT", "60")),
        "IMPLICIT_TLS": os.getenv("TS_FTPS_IMPLICIT", "false").lower() in ("1","true","yes"),  # для порту 990
    },
    "LOCAL": {
        "INCOMING_DIR": os.getenv("TS_LOCAL_INCOMING_DIR", "C:/incoming"),
    },
    "FILE": {
        "ENCODING": os.getenv("TS_TRS_ENCODING", "utf-8"),
        "DELIMITER": os.getenv("TS_TRS_DELIMITER", "auto"),
        "NAME": os.getenv("TS_FILE_NAME", "TSGoods.trs"),
    },

    # модель продукту: можна підставити свою, напр. "products.Product"
    "PRODUCT_MODEL": os.getenv("TS_PRODUCT_MODEL", "products.Product"),
    "INBOUND_TOKEN": os.getenv("TS_INBOUND_TOKEN", "change_me"),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # Middleware для локалізації
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.users.middleware.SessionExpiredMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'Laskazoo.urls'

AUTH_USER_MODEL = 'users.CustomUser'
LOGIN_REDIRECT_URL  = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/users/login/'

AUTHENTICATION_BACKENDS = [
    'apps.users.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_QUERY_EMAIL = True
ACCOUNT_ADAPTER = 'apps.users.adapters.MyAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'apps.users.adapters.MySocialAccountAdapter'

# Google OAuth redirect
LOGIN_REDIRECT_URL = '/'
SOCIALACCOUNT_LOGIN_ON_GET = True

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        # APP налаштовується через базу даних (SocialApp)
        # Не додавайте 'APP' тут, щоб уникнути конфлікту
    }
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [

                'apps.favourites.context_processors.fav_count',
                'apps.orders.context_processors.cart_summary',
                'apps.users.context_processors.auth_forms',

                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Laskazoo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    # PostgreSQL - основна база даних
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('PG_NAME', 'laska_db'),
        'USER': os.getenv('PG_USER', 'danil'),
        'PASSWORD': os.getenv('PG_PASS', 'danilus15'),
        'HOST': os.getenv('PG_HOST', '127.0.0.1'),
        'PORT': os.getenv('PG_PORT', '5432'),
        'CONN_MAX_AGE': 60,
    },
    
    # SQLite для резервного копіювання
    # 'sqlite_backup': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 4,
        }
    },
    # Закоментовані строгі валідатори для простішої реєстрації
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'uk'  # Українська мова за замовчуванням

TIME_ZONE = 'Europe/Kyiv'  # Київський часовий пояс

USE_I18N = True  # Увімкнути інтернаціоналізацію

USE_TZ = True

# Доступні мови
LANGUAGES = [
    ('uk', 'Українська'),
    ('en', 'English'),
]

# Шляхи до файлів перекладу
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# де фізично лежатимуть завантажені файли
MEDIA_ROOT = BASE_DIR / 'media/'

# публічний префікс для доступу до них
MEDIA_URL = '/media/'

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery налаштування
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Шлях для експорту замовлень
TS_LOCAL_INCOMING_DIR = os.getenv('TS_LOCAL_INCOMING_DIR', '/home/torgsoft/incoming')

# Якщо шлях не існує (локальна розробка), використовуємо папку в проекті
if not os.path.exists(TS_LOCAL_INCOMING_DIR):
    TS_LOCAL_INCOMING_DIR = BASE_DIR / 'exports'

# Налаштування логування
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'apps.users': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}

# Налаштування Нової Пошти
NOVA_POSHTA_API_KEY = os.getenv('NOVA_POSHTA_API_KEY', '')

# Налаштування відправника для Нової Пошти (налаштуй через адмін-панель або додай в .env)
NOVA_POSHTA_SENDER_REF = os.getenv('NOVA_POSHTA_SENDER_REF', '')  # Ref відправника
NOVA_POSHTA_SENDER_CONTACT_REF = os.getenv('NOVA_POSHTA_SENDER_CONTACT_REF', '')  # Ref контакту
NOVA_POSHTA_SENDER_ADDRESS_REF = os.getenv('NOVA_POSHTA_SENDER_ADDRESS_REF', '')  # Ref адреси відправника
NOVA_POSHTA_SENDER_CITY_REF = os.getenv('NOVA_POSHTA_SENDER_CITY_REF', '')  # Ref міста відправника
NOVA_POSHTA_SENDER_PHONE = os.getenv('NOVA_POSHTA_SENDER_PHONE', '')  # Телефон відправника

# Email налаштування
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@laskazoo.com')
