# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Portmone —Ç–∞ —ñ–Ω—à—ñ —Å–µ—Ä–≤—ñ—Å–∏
"""

import hashlib
import hmac
import json
from decimal import Decimal
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.http import JsonResponse, HttpResponse
from django.conf import settings
from django.urls import reverse
from django.template.loader import render_to_string
from django.core.mail import EmailMultiAlternatives

from .models import Order, PaymentTransaction


# ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø PORTMONE ==========
# –û—Ç—Ä–∏–º–∞–π —Ü—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ https://www.portmone.com.ua/
PORTMONE_PAYEE_ID = getattr(settings, 'PORTMONE_PAYEE_ID', 'YOUR_PAYEE_ID')
PORTMONE_LOGIN = getattr(settings, 'PORTMONE_LOGIN', 'YOUR_LOGIN')
PORTMONE_PASSWORD = getattr(settings, 'PORTMONE_PASSWORD', 'YOUR_PASSWORD')
PORTMONE_API_URL = 'https://www.portmone.com.ua/gateway/'


def generate_portmone_signature(params, password):
    """
    –ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥–ø–∏—Å –¥–ª—è Portmone –∑–≥—ñ–¥–Ω–æ —ó—Ö–Ω—å–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
    """
    # –°–æ—Ä—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∫–ª—é—á–∞–º–∏
    sorted_params = sorted(params.items())
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
    sign_string = ';'.join([f"{k}={v}" for k, v in sorted_params])
    sign_string += f";{password}"
    
    # SHA256 —Ö–µ—à
    signature = hashlib.sha256(sign_string.encode('utf-8')).hexdigest()
    return signature


@login_required
def payment_page(request, order_id):
    """
    –°—Ç–æ—Ä—ñ–Ω–∫–∞ –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    """
    order = get_object_or_404(Order, id=order_id, user=request.user)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    transaction = PaymentTransaction.objects.create(
        order=order,
        transaction_type='payment',
        status='initiated',
        amount=order.total_amount,
        currency='UAH',
        payment_system='portmone'
    )
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é #{transaction.id} –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä–µ–±—É—î –æ–ø–ª–∞—Ç–∏
    if order.payment_method != 'card_online':
        return redirect('orders:detail', pk=order.id)
    
    # –Ø–∫—â–æ –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ
    if order.payment_status == 'paid':
        return redirect('orders:payment_success', order_id=order.id)
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Ñ–æ—Ä–º–∏
    amount = float(order.total_amount)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Portmone
    portmone_params = {
        'payee_id': PORTMONE_PAYEE_ID,
        'shop_order_number': str(order.order_number or order.id),
        'bill_amount': f"{amount:.2f}",
        'description': f"–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}",
        'success_url': request.build_absolute_uri(reverse('orders:payment_success', kwargs={'order_id': order.id})),
        'failure_url': request.build_absolute_uri(reverse('orders:payment_failure', kwargs={'order_id': order.id})),
        'result_url': request.build_absolute_uri(reverse('orders:payment_callback')),
        'lang': 'uk',
    }
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—ñ–¥–ø–∏—Å (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥—ñ–¥–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó)
    # portmone_params['signature'] = generate_portmone_signature(portmone_params, PORTMONE_PASSWORD)
    
    context = {
        'order': order,
        'portmone_url': PORTMONE_API_URL,
        'portmone_params': portmone_params,
        'amount': amount,
    }
    
    return render(request, 'zoosvit/orders/payment.html', context)


@login_required
def payment_success(request, order_id):
    """
    –°—Ç–æ—Ä—ñ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
    """
    order = get_object_or_404(Order, id=order_id, user=request.user)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ (—è–∫—â–æ —â–µ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ callback'–æ–º)
    if order.payment_status == 'pending':
        order.payment_status = 'paid'
        order.save()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = order.transactions.filter(status='initiated').order_by('-created_at').first()
        if transaction:
            transaction.mark_as_success()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
        send_payment_success_email(order)
    
    context = {
        'order': order,
    }
    
    return render(request, 'zoosvit/orders/payment_success.html', context)


@login_required
def payment_failure(request, order_id):
    """
    –°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ–≤–¥–∞–ª–æ—ó –æ–ø–ª–∞—Ç–∏
    """
    order = get_object_or_404(Order, id=order_id, user=request.user)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏
    if order.payment_status == 'pending':
        order.payment_status = 'failed'
        order.save()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = order.transactions.filter(status='initiated').order_by('-created_at').first()
        if transaction:
            transaction.mark_as_failed('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ —á–µ—Ä–µ–∑ Portmone')
    
    context = {
        'order': order,
    }
    
    return render(request, 'zoosvit/orders/payment_failure.html', context)


@csrf_exempt
@require_POST
def payment_callback(request):
    """
    Callback –≤—ñ–¥ Portmone –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
    Portmone –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î POST –∑–∞–ø–∏—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ Portmone
        data = request.POST.dict()
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É
        print(f"üì• Portmone callback: {data}")
        
        # –í–∏—Ç—è–≥—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (–Ω–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ –º–æ–∂—É—Ç—å –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è, –¥–∏–≤–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é Portmone)
        shop_order_number = data.get('SHOPORDERNUMBER') or data.get('shop_order_number')
        status = data.get('RESULT') or data.get('status')
        payment_id = data.get('APPROVALCODE') or data.get('payment_id')
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = Order.objects.filter(order_number=shop_order_number).first()
        if not order:
            # –ú–æ–∂–ª–∏–≤–æ ID –ø–µ—Ä–µ–¥–∞–Ω–æ –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É
            try:
                order = Order.objects.get(id=int(shop_order_number))
            except (ValueError, Order.DoesNotExist):
                return HttpResponse('Order not found', status=404)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é callback
        callback_transaction = PaymentTransaction.objects.create(
            order=order,
            transaction_type='callback',
            status='processing',
            amount=order.total_amount,
            currency='UAH',
            payment_system='portmone',
            external_id=payment_id,
            request_data=data
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏
        if status == '0' or status == 'success':  # –£—Å–ø—ñ—à–Ω–∞ –æ–ø–ª–∞—Ç–∞ (–ø–µ—Ä–µ–≤—ñ—Ä –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó)
            order.payment_status = 'paid'
            order.payment_id = payment_id
            order.save()
            
            callback_transaction.mark_as_success(response_data=data)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            main_transaction = order.transactions.filter(
                transaction_type='payment',
                status='initiated'
            ).order_by('-created_at').first()
            if main_transaction:
                main_transaction.external_id = payment_id
                main_transaction.mark_as_success(response_data=data)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
            send_payment_success_email(order)
            
            print(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number}")
        else:
            order.payment_status = 'failed'
            order.save()
            
            error_msg = data.get('ERROR_MESSAGE', '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞')
            callback_transaction.mark_as_failed(error_message=error_msg, response_data=data)
            
            print(f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ—É—Å–ø—ñ—à–Ω–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number}")
        
        return HttpResponse('OK')
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ payment_callback: {e}")
        return HttpResponse('Error', status=500)


# ========== GOOGLE PAY INTEGRATION ==========

@login_required
def google_pay_init(request, order_id):
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Google Pay
    –î–ª—è —Ä–æ–±–æ—Ç–∏ Google Pay –ø–æ—Ç—Ä—ñ–±–Ω–æ:
    1. –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ Google Pay API –≤ Google Cloud Console
    2. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ merchant ID
    3. –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ –ø–ª–∞—Ç—ñ–∂–Ω–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Portmone)
    """
    order = get_object_or_404(Order, id=order_id, user=request.user)
    
    if order.payment_method != 'card_online':
        return JsonResponse({'error': 'Invalid payment method'}, status=400)
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è Google Pay
    amount = float(order.total_amount)
    
    payment_data = {
        'order_id': order.id,
        'order_number': order.order_number or str(order.id),
        'amount': amount,
        'currency': 'UAH',
        'description': f"–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}",
    }
    
    return JsonResponse(payment_data)


# ========== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ==========

def create_payment_link(order):
    """
    –°—Ç–≤–æ—Ä—é—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    """
    payment_url = f"{PORTMONE_API_URL}?"
    params = {
        'payee_id': PORTMONE_PAYEE_ID,
        'shop_order_number': str(order.order_number or order.id),
        'bill_amount': f"{float(order.total_amount):.2f}",
        'description': f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}",
        'lang': 'uk',
    }
    
    # –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–æ URL
    param_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    return payment_url + param_string


def send_payment_success_email(order):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î email –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É
    """
    try:
        subject = f'‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞ - –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}'
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω—É
        context = {
            'order': order,
            'site_url': getattr(settings, 'SITE_URL', 'http://localhost:8000'),
            'admin_email': getattr(settings, 'ADMIN_EMAIL', 'admin@laskazoo.com'),
        }
        
        # HTML –≤–µ—Ä—Å—ñ—è
        html_content = render_to_string('zoosvit/emails/payment_success.html', context)
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞ –≤–µ—Ä—Å—ñ—è
        text_content = f"""
        –í—ñ—Ç–∞—î–º–æ, {order.full_name}!
        
        –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ.
        
        –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}
        –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}
        –°—É–º–∞: {order.total_amount} –≥—Ä–Ω
        
        –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.
        
        –ó –ø–æ–≤–∞–≥–æ—é,
        –ö–æ–º–∞–Ω–¥–∞ Laskazoo
        """
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ email
        email = EmailMultiAlternatives(
            subject=subject,
            body=text_content,
            from_email=getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@laskazoo.com'),
            to=[order.email]
        )
        
        # –î–æ–¥–∞—î–º–æ HTML –≤–µ—Ä—Å—ñ—é
        email.attach_alternative(html_content, "text/html")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
        email.send(fail_silently=True)
        
        print(f"‚úâÔ∏è  Email –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {order.email}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False
