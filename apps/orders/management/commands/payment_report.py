# -*- coding: utf-8 -*-
"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤ –ø–æ –æ–ø–ª–∞—Ç–∞—Ö
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db.models import Count, Sum, Q
from apps.orders.models import Order
from decimal import Decimal


class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø–æ –æ–ø–ª–∞—Ç–∞—Ö –∑–∞ –ø–µ—Ä—ñ–æ–¥'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=30,
            help='–ü–µ—Ä—ñ–æ–¥ —É –¥–Ω—è—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 30)'
        )
        parser.add_argument(
            '--export',
            type=str,
            help='–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç —É —Ñ–∞–π–ª (–≤–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö)'
        )

    def handle(self, *args, **options):
        days = options['days']
        date_from = timezone.now() - timezone.timedelta(days=days)
        
        self.stdout.write(self.style.SUCCESS(f'\nüìä –ó–í–Ü–¢ –ü–û –û–ü–õ–ê–¢–ê–•'))
        self.stdout.write(self.style.SUCCESS(f'–ü–µ—Ä—ñ–æ–¥: {date_from.strftime("%d.%m.%Y")} - {timezone.now().strftime("%d.%m.%Y")}'))
        self.stdout.write('=' * 80)
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        orders = Order.objects.filter(
            created_at__gte=date_from
        ).exclude(status=Order.STATUS_CART)
        
        total_orders = orders.count()
        
        # –ü–æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç–∏
        cash_orders = orders.filter(payment_method='cash').count()
        card_orders = orders.filter(payment_method='card_online').count()
        
        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞—Ö –æ–ø–ª–∞—Ç–∏
        paid_orders = orders.filter(payment_status='paid').count()
        pending_orders = orders.filter(payment_status='pending').count()
        failed_orders = orders.filter(payment_status='failed').count()
        
        # –°—É–º–∏
        total_amount = sum(order.total_amount for order in orders)
        
        cash_amount = sum(
            order.total_amount 
            for order in orders.filter(payment_method='cash')
        )
        
        card_paid_amount = sum(
            order.total_amount 
            for order in orders.filter(payment_method='card_online', payment_status='paid')
        )
        
        card_pending_amount = sum(
            order.total_amount 
            for order in orders.filter(payment_method='card_online', payment_status='pending')
        )
        
        # –í–∏–≤–æ–¥–∏–º–æ –∑–≤—ñ—Ç
        self.stdout.write(f'\nüì¶ –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f'  –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}')
        self.stdout.write(f'  –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount:.2f} –≥—Ä–Ω')
        
        self.stdout.write(f'\nüí∞ –ü–û –°–ü–û–°–û–ë–ê–• –û–ü–õ–ê–¢–ò:')
        self.stdout.write(f'  üíµ –ì–æ—Ç—ñ–≤–∫–∞: {cash_orders} –∑–∞–º–æ–≤–ª–µ–Ω—å ({cash_amount:.2f} –≥—Ä–Ω)')
        self.stdout.write(f'  üí≥ –ö–∞—Ä—Ç–∫–∞: {card_orders} –∑–∞–º–æ–≤–ª–µ–Ω—å')
        
        if card_orders > 0:
            self.stdout.write(f'\nüí≥ –°–¢–ê–¢–£–° –û–ü–õ–ê–¢ –ö–ê–†–¢–ö–û–Æ:')
            self.stdout.write(self.style.SUCCESS(
                f'  üü¢ –û–ø–ª–∞—á–µ–Ω–æ: {paid_orders} –∑–∞–º–æ–≤–ª–µ–Ω—å ({card_paid_amount:.2f} –≥—Ä–Ω)'
            ))
            self.stdout.write(self.style.WARNING(
                f'  üü° –û—á—ñ–∫—É—î: {pending_orders} –∑–∞–º–æ–≤–ª–µ–Ω—å ({card_pending_amount:.2f} –≥—Ä–Ω)'
            ))
            self.stdout.write(self.style.ERROR(
                f'  üî¥ –ù–µ –ø—Ä–æ–π—à–ª–∞: {failed_orders} –∑–∞–º–æ–≤–ª–µ–Ω—å'
            ))
            
            # –ö–æ–Ω–≤–µ—Ä—Å—ñ—è
            if card_orders > 0:
                conversion_rate = (paid_orders / card_orders) * 100
                self.stdout.write(f'\nüìà –ö–û–ù–í–ï–†–°–Ü–Ø –û–ü–õ–ê–¢:')
                self.stdout.write(f'  –£—Å–ø—ñ—à–Ω–∏—Ö –æ–ø–ª–∞—Ç: {conversion_rate:.1f}%')
        
        # –©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
        self.stdout.write(f'\nüìÖ –î–ò–ù–ê–ú–Ü–ö–ê –û–°–¢–ê–ù–ù–Ü–• 7 –î–ù–Ü–í:')
        self.stdout.write('-' * 80)
        
        for i in range(7):
            day = timezone.now() - timezone.timedelta(days=i)
            day_start = day.replace(hour=0, minute=0, second=0, microsecond=0)
            day_end = day.replace(hour=23, minute=59, second=59, microsecond=999999)
            
            day_orders = orders.filter(created_at__range=[day_start, day_end])
            day_count = day_orders.count()
            day_amount = sum(order.total_amount for order in day_orders)
            
            day_paid = day_orders.filter(
                payment_method='card_online', 
                payment_status='paid'
            ).count()
            
            self.stdout.write(
                f"{day.strftime('%d.%m.%Y (%A)'):<25} | "
                f"–ó–∞–º–æ–≤–ª–µ–Ω—å: {day_count:>3} | "
                f"–°—É–º–∞: {day_amount:>10.2f} –≥—Ä–Ω | "
                f"–û–ø–ª–∞—Ç –∫–∞—Ä—Ç–∫–æ—é: {day_paid:>2}"
            )
        
        self.stdout.write('=' * 80)
        
        # –¢–æ–ø 5 –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –æ–ø–ª–∞—Ç
        top_orders = orders.order_by('-total_amount')[:5]
        if top_orders:
            self.stdout.write(f'\nüíé –¢–û–ü 5 –ù–ê–ô–ë–Ü–õ–¨–®–ò–• –ó–ê–ú–û–í–õ–ï–ù–¨:')
            for idx, order in enumerate(top_orders, 1):
                payment_icon = 'üí≥' if order.payment_method == 'card_online' else 'üíµ'
                status_icon = 'üü¢' if order.payment_status == 'paid' else 'üü°'
                self.stdout.write(
                    f"  {idx}. {payment_icon} {status_icon} "
                    f"#{order.order_number or order.id} | "
                    f"{order.full_name} | "
                    f"{order.total_amount:.2f} –≥—Ä–Ω | "
                    f"{order.created_at.strftime('%d.%m.%Y')}"
                )
        
        self.stdout.write('\n' + '=' * 80)
        self.stdout.write(self.style.SUCCESS('‚úÖ –ó–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ!\n'))
        
        # –ï–∫—Å–ø–æ—Ä—Ç —É —Ñ–∞–π–ª
        if options['export']:
            self.export_to_file(options['export'], orders, {
                'total_orders': total_orders,
                'total_amount': total_amount,
                'cash_orders': cash_orders,
                'card_orders': card_orders,
                'paid_orders': paid_orders,
                'pending_orders': pending_orders,
                'failed_orders': failed_orders,
            })
    
    def export_to_file(self, filepath, orders, stats):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –∑–≤—ñ—Ç —É —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write('=' * 80 + '\n')
                f.write('–ó–í–Ü–¢ –ü–û –û–ü–õ–ê–¢–ê–•\n')
                f.write(f"–î–∞—Ç–∞: {timezone.now().strftime('%d.%m.%Y %H:%M')}\n")
                f.write('=' * 80 + '\n\n')
                
                f.write('–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n')
                f.write(f"–í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {stats['total_orders']}\n")
                f.write(f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {stats['total_amount']:.2f} –≥—Ä–Ω\n")
                f.write(f"–ì–æ—Ç—ñ–≤–∫–∞: {stats['cash_orders']} –∑–∞–º–æ–≤–ª–µ–Ω—å\n")
                f.write(f"–ö–∞—Ä—Ç–∫–∞: {stats['card_orders']} –∑–∞–º–æ–≤–ª–µ–Ω—å\n")
                f.write(f"  - –û–ø–ª–∞—á–µ–Ω–æ: {stats['paid_orders']}\n")
                f.write(f"  - –û—á—ñ–∫—É—î: {stats['pending_orders']}\n")
                f.write(f"  - –ù–µ –ø—Ä–æ–π—à–ª–∞: {stats['failed_orders']}\n\n")
                
                f.write('=' * 80 + '\n')
                f.write('–î–ï–¢–ê–õ–Ü –ó–ê–ú–û–í–õ–ï–ù–¨:\n')
                f.write('=' * 80 + '\n\n')
                
                for order in orders:
                    f.write(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id}\n")
                    f.write(f"–ö–ª—ñ—î–Ω—Ç: {order.full_name}\n")
                    f.write(f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n")
                    f.write(f"–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {order.get_payment_method_display()}\n")
                    f.write(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {order.payment_status}\n")
                    f.write(f"–°—É–º–∞: {order.total_amount:.2f} –≥—Ä–Ω\n")
                    f.write(f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n")
                    f.write('-' * 40 + '\n\n')
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –ó–≤—ñ—Ç –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É —Ñ–∞–π–ª: {filepath}'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}'))
