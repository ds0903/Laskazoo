from django.core.management.base import BaseCommand
from apps.orders.models import Order
from django.utils import timezone
from datetime import timedelta
import os
from django.conf import settings


class Command(BaseCommand):
    help = '–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ –µ–∫—Å–ø–æ—Ä—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω—å'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('=== –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ –µ–∫—Å–ø–æ—Ä—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω—å ===\n'))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
        statuses = [
            (Order.STATUS_CART, '–£ –∫–æ—à–∏–∫—É'),
            (Order.STATUS_IN_PROCESS, '–í –ø—Ä–æ—Ü–µ—Å—ñ (–Ω–æ–≤—ñ)'),
            (Order.STATUS_PROCESSING, '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è (–≤ JSON)'),
            (Order.STATUS_SHIPPED, '–í –¥–æ—Ä–æ–∑—ñ'),
            (Order.STATUS_COMPLETED, '–í–∏–∫–æ–Ω–∞–Ω—ñ'),
            (Order.STATUS_CANCELED, '–°–∫–∞—Å–æ–≤–∞–Ω—ñ'),
        ]
        
        self.stdout.write('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å:')
        for status_code, status_name in statuses:
            count = Order.objects.filter(status=status_code).count()
            if count > 0:
                self.stdout.write(f'  {status_name}: {count}')
        
        # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
        export_orders = Order.objects.filter(
            status__in=[Order.STATUS_IN_PROCESS, Order.STATUS_PROCESSING]
        )
        self.stdout.write(f'\nüì§ –ó–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É: {export_orders.count()}')
        
        if export_orders.exists():
            self.stdout.write('  –î–µ—Ç–∞–ª—ñ:')
            for order in export_orders[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                self.stdout.write(
                    f'    #{order.id} - {order.full_name} - '
                    f'{order.get_status_display()} - '
                    f'{order.created_at.strftime("%Y-%m-%d %H:%M")}'
                )
            if export_orders.count() > 5:
                self.stdout.write(f'    ... —ñ —â–µ {export_orders.count() - 5}')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–∫–∏ –µ–∫—Å–ø–æ—Ä—Ç—É
        export_dir = getattr(settings, 'TS_LOCAL_INCOMING_DIR', None)
        if not export_dir or not os.path.exists(export_dir):
            export_dir = os.path.join(settings.BASE_DIR, 'exports')
        
        self.stdout.write(f'\nüìÅ –ü–∞–ø–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {export_dir}')
        
        if os.path.exists(export_dir):
            json_files = [f for f in os.listdir(export_dir) if f.endswith('.json')]
            self.stdout.write(f'  JSON —Ñ–∞–π–ª—ñ–≤: {len(json_files)}')
            
            if json_files:
                # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 3 —Ñ–∞–π–ª–∏
                json_files.sort(reverse=True)
                self.stdout.write('  –û—Å—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª–∏:')
                for file in json_files[:3]:
                    file_path = os.path.join(export_dir, file)
                    mtime = os.path.getmtime(file_path)
                    mtime_str = timezone.datetime.fromtimestamp(mtime).strftime('%Y-%m-%d %H:%M')
                    self.stdout.write(f'    {file} - {mtime_str}')
        else:
            self.stdout.write('  ‚ùå –ü–∞–ø–∫–∞ –Ω–µ —ñ—Å–Ω—É—î')
        
        # –û—Å—Ç–∞–Ω–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        recent_exported = Order.objects.filter(
            exported=True,
            exported_at__gte=timezone.now() - timedelta(hours=24)
        ).order_by('-exported_at')[:5]
        
        if recent_exported:
            self.stdout.write(f'\n‚è∞ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {recent_exported.count()}')
            for order in recent_exported:
                self.stdout.write(
                    f'  #{order.id} - {order.exported_at.strftime("%Y-%m-%d %H:%M")}'
                )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        self.stdout.write('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:')
        
        in_process_count = Order.objects.filter(status=Order.STATUS_IN_PROCESS).count()
        if in_process_count > 0:
            self.stdout.write(f'  ‚Ä¢ –Ñ {in_process_count} –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å - –∑–∞–ø—É—Å—Ç—ñ—Ç—å –µ–∫—Å–ø–æ—Ä—Ç')
            
        processing_count = Order.objects.filter(status=Order.STATUS_PROCESSING).count()
        if processing_count > 10:
            self.stdout.write(f'  ‚Ä¢ –ë–∞–≥–∞—Ç–æ –∑–∞–º–æ–≤–ª–µ–Ω—å ({processing_count}) –≤ —Å—Ç–∞—Ç—É—Å—ñ "–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è" - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
            
        if not json_files:
            self.stdout.write('  ‚Ä¢ –ù–µ–º–∞—î JSON —Ñ–∞–π–ª—ñ–≤ - —Å–∏—Å—Ç–µ–º–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏')
        
        self.stdout.write('\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
