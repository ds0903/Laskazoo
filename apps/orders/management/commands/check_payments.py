# -*- coding: utf-8 -*-
"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–∞—Ç—É—Å—ñ–≤ –æ–ø–ª–∞—Ç
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from apps.orders.models import Order
import requests


class Command(BaseCommand):
    help = '–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç —á–µ—Ä–µ–∑ Portmone API'

    def add_arguments(self, parser):
        parser.add_argument(
            '--order-id',
            type=int,
            help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID'
        )
        parser.add_argument(
            '--pending-only',
            action='store_true',
            help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–æ—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏"'
        )
        parser.add_argument(
            '--days',
            type=int,
            default=7,
            help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 7)'
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–∞—Ç—É—Å—ñ–≤ –æ–ø–ª–∞—Ç...'))
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        queryset = Order.objects.filter(payment_method='card_online')
        
        if options['order_id']:
            queryset = queryset.filter(id=options['order_id'])
            self.stdout.write(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{options['order_id']}")
        elif options['pending_only']:
            queryset = queryset.filter(payment_status='pending')
            self.stdout.write(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'")
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤
            days = options['days']
            date_from = timezone.now() - timezone.timedelta(days=days)
            queryset = queryset.filter(created_at__gte=date_from)
            self.stdout.write(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤")
        
        queryset = queryset.order_by('-created_at')
        total = queryset.count()
        
        if total == 0:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –ó–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'))
            return
        
        self.stdout.write(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total}")
        self.stdout.write('-' * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'checked': 0,
            'paid': 0,
            'pending': 0,
            'failed': 0,
            'updated': 0,
        }
        
        for order in queryset:
            stats['checked'] += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            if order.payment_status == 'paid':
                stats['paid'] += 1
                status_icon = 'üü¢'
            elif order.payment_status == 'pending':
                stats['pending'] += 1
                status_icon = 'üü°'
            else:
                stats['failed'] += 1
                status_icon = 'üî¥'
            
            # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            self.stdout.write(
                f"{status_icon} –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id} | "
                f"–ö–ª—ñ—î–Ω—Ç: {order.full_name} | "
                f"–°—É–º–∞: {order.total_amount} –≥—Ä–Ω | "
                f"–°—Ç–∞—Ç—É—Å: {order.payment_status} | "
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
            
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ Portmone API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
            # if order.payment_status == 'pending':
            #     new_status = self.check_payment_status_with_portmone(order)
            #     if new_status and new_status != order.payment_status:
            #         order.payment_status = new_status
            #         order.save()
            #         stats['updated'] += 1
            #         self.stdout.write(self.style.SUCCESS(f"  ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–∞: {new_status}"))
        
        # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stdout.write('-' * 80)
        self.stdout.write(self.style.SUCCESS('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:'))
        self.stdout.write(f"–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {stats['checked']}")
        self.stdout.write(self.style.SUCCESS(f"üü¢ –û–ø–ª–∞—á–µ–Ω–æ: {stats['paid']}"))
        self.stdout.write(self.style.WARNING(f"üü° –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏: {stats['pending']}"))
        self.stdout.write(self.style.ERROR(f"üî¥ –ù–µ –ø—Ä–æ–π—à–ª–∞: {stats['failed']}"))
        if stats['updated'] > 0:
            self.stdout.write(self.style.SUCCESS(f"‚ú® –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å—ñ–≤: {stats['updated']}"))
        
        self.stdout.write(self.style.SUCCESS('\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'))

    def check_payment_status_with_portmone(self, order):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Portmone API
        –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –∞–±–æ None
        """
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ Portmone API
        # –ü—Ä–∏–∫–ª–∞–¥:
        # response = requests.post(
        #     'https://www.portmone.com.ua/gateway/status',
        #     data={
        #         'payee_id': settings.PORTMONE_PAYEE_ID,
        #         'shop_order_number': order.order_number,
        #     }
        # )
        # if response.status_code == 200:
        #     data = response.json()
        #     return 'paid' if data.get('status') == 'success' else 'failed'
        return None
