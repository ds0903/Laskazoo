"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: https://developers.novaposhta.ua/
"""
import requests
from django.conf import settings
import logging

logger = logging.getLogger(__name__)

class NovaPoshtaAPI:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏"""
    
    BASE_URL = "https://api.novaposhta.ua/v2.0/json/"
    
    def __init__(self):
        self.api_key = getattr(settings, 'NOVA_POSHTA_API_KEY', '')
        if not self.api_key:
            logger.warning("NOVA_POSHTA_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –≤ settings")
    
    def _make_request(self, model_name, called_method, method_properties=None):
        """–ë–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API"""
        if not self.api_key:
            logger.error("API –∫–ª—é—á –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            return None
        
        payload = {
            "apiKey": self.api_key,
            "modelName": model_name,
            "calledMethod": called_method,
            "methodProperties": method_properties or {}
        }
        
        try:
            response = requests.post(self.BASE_URL, json=payload, timeout=10)
            response.raise_for_status()
            result = response.json()
            
            if not result.get('success'):
                errors = result.get('errors', [])
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {errors}")
                return None
            
            return result.get('data', [])
        
        except requests.exceptions.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {e}")
            return None
    
    def search_cities(self, query):
        """
        –ü–æ—à—É–∫ –º—ñ—Å—Ç –∑–∞ –Ω–∞–∑–≤–æ—é –∞–±–æ —ñ–Ω–¥–µ–∫—Å–æ–º
        
        Args:
            query (str): –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç (–Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∞–±–æ —ñ–Ω–¥–µ–∫—Å)
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        """
        print(f"üîç NovaPoshtaAPI.search_cities: query='{query}'")
        print(f"üîë NovaPoshtaAPI.search_cities: api_key={'SET' if self.api_key else 'NOT SET'}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É getCities (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥)
        print(f"üì¶ NovaPoshtaAPI: –°–ø—Ä–æ–±—É—î–º–æ getCities...")
        
        data = self._make_request(
            model_name="Address",
            called_method="getCities",
            method_properties={"FindByString": query}
        )
        
        print(f"üì¨ NovaPoshtaAPI getCities: data={data[:2] if data and len(data) > 0 else data}")
        
        if data and len(data) > 0:
            # getCities –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º—ñ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
            cities = []
            for item in data:
                cities.append({
                    'ref': item.get('Ref', '') or item.get('DeliveryCity', ''),
                    'present': item.get('Description', '') + ', ' + item.get('AreaDescription', ''),
                    'main_description': item.get('Description', ''),
                    'area': item.get('AreaDescription', ''),
                    'region': item.get('RegionsDescription', ''),
                    'settlement_type': 'city'
                })
            print(f"‚úÖ NovaPoshtaAPI getCities: –ó–Ω–∞–π–¥–µ–Ω–æ {len(cities)} –º—ñ—Å—Ç")
            return cities
        
        # –Ø–∫—â–æ getCities –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ - –ø—Ä–æ–±—É—î–º–æ searchSettlements
        print(f"üì¶ NovaPoshtaAPI: –ü—Ä–æ–±—É—î–º–æ searchSettlements...")
        
        method_properties = {
            "FindByString": query,
            "Limit": "50"
        }
        
        data = self._make_request(
            model_name="Address",
            called_method="searchSettlements",
            method_properties=method_properties
        )
        
        print(f"üì¨ NovaPoshtaAPI: –û—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, data type={type(data)}, length={len(data) if data else 0}")
        
        # DEBUG: –í–∏–≤–æ–¥–∏–º–æ –≤—Å—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if data:
            print(f"üîç DEBUG searchSettlements: {data}")
        
        if not data or not isinstance(data, list) or len(data) == 0:
            print("‚ùå NovaPoshtaAPI: –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
            return []
        
        # API –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º –æ–±'—î–∫—Ç–æ–º, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å Addresses
        addresses = data[0].get('Addresses', []) if data else []
        
        print(f"üèõÔ∏è NovaPoshtaAPI: –ó–Ω–∞–π–¥–µ–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å")
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Å–ø—Ä–æ–±—É—î–º–æ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏
        if len(addresses) == 0 and query:
            print(f"üîÑ NovaPoshtaAPI: –ü—Ä–æ–±—É—î–º–æ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏...")
            capitalized_query = query.capitalize()
            
            retry_data = self._make_request(
                model_name="Address",
                called_method="searchSettlements",
                method_properties={
                    "FindByString": capitalized_query,
                    "Limit": "50"
                }
            )
            
            if retry_data and len(retry_data) > 0:
                addresses = retry_data[0].get('Addresses', [])
                print(f"‚úÖ NovaPoshtaAPI: –ó –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏ –∑–Ω–∞–π–¥–µ–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å")
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        cities = []
        for item in addresses:
            cities.append({
                'ref': item.get('DeliveryCity', ''),  # Ref –º—ñ—Å—Ç–∞
                'present': item.get('Present', ''),    # –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                'main_description': item.get('MainDescription', ''),  # –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞
                'area': item.get('Area', ''),  # –û–±–ª–∞—Å—Ç—å
                'region': item.get('Region', ''),  # –†–∞–π–æ–Ω
                'settlement_type': item.get('SettlementTypeCode', '')  # –¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É
            })
        
        return cities
    
    def get_warehouses(self, city_ref, find_by_string=''):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ –≤ –º—ñ—Å—Ç—ñ
        
        Args:
            city_ref (str): Ref –º—ñ—Å—Ç–∞
            find_by_string (str): –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä –∑–∞ –Ω–æ–º–µ—Ä–æ–º –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
        """
        print(f"üè™ NovaPoshtaAPI.get_warehouses: city_ref='{city_ref}'")
        
        method_properties = {
            "CityRef": city_ref,
            "Limit": "100"
        }
        
        if find_by_string:
            method_properties["FindByString"] = find_by_string
        
        print(f"üì¶ NovaPoshtaAPI: –ó–∞–ø–∏—Ç –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {method_properties}")
        
        data = self._make_request(
            model_name="Address",
            called_method="getWarehouses",
            method_properties=method_properties
        )
        
        print(f"üì¨ NovaPoshtaAPI: –û—Ç—Ä–∏–º–∞–ª–∏ {len(data) if data else 0} –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
        
        if not data:
            print("‚ùå NovaPoshtaAPI: –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return []
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        warehouses = []
        for item in data:
            warehouses.append({
                'ref': item.get('Ref', ''),  # Ref –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
                'description': item.get('Description', ''),  # –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞
                'short_address': item.get('ShortAddress', ''),  # –ö–æ—Ä–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
                'number': item.get('Number', ''),  # –ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
                'type': item.get('TypeOfWarehouse', ''),  # –¢–∏–ø –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
                'city_ref': item.get('CityRef', '')  # Ref –º—ñ—Å—Ç–∞
            })
        
        print(f"‚úÖ NovaPoshtaAPI: –°—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ {len(warehouses)} –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
        return warehouses
    
    def create_internet_document(self, order_data):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫—Å–ø—Ä–µ—Å-–Ω–∞–∫–ª–∞–¥–Ω–æ—ó (–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è)
        
        Args:
            order_data (dict): –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                - sender_ref: Ref –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ (–≤–∞—à –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç)
                - sender_contact_ref: Ref –∫–æ–Ω—Ç–∞–∫—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
                - sender_address_ref: Ref –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
                - recipient_name: –ü–Ü–ë –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
                - recipient_phone: –¢–µ–ª–µ—Ñ–æ–Ω –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
                - recipient_city_ref: Ref –º—ñ—Å—Ç–∞ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
                - recipient_warehouse_ref: Ref –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
                - cost: –û—Ü—ñ–Ω–æ—á–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
                - weight: –í–∞–≥–∞ (–∫–≥)
                - seats_amount: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å
                - description: –û–ø–∏—Å –≤–∞–Ω—Ç–∞–∂—É
                - payment_method: –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ (Cash/NonCash)
                - backward_delivery_money: –°—É–º–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è –Ω–∞–∫–ª–∞–¥–µ–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É)
        
        Returns:
            dict: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω—É –Ω–∞–∫–ª–∞–¥–Ω—É –∞–±–æ None
        """
        # –ë–∞–∑–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –º–µ—Ç–æ–¥—É
        # –î–õ–Ø –î–ï–ë–ê–ì–£: —Å–∏–º—É–ª—é—î–º–æ —â–æ —Ç–æ–≤–∞—Ä –í–ñ–ï –û–ü–õ–ê–ß–ï–ù–ò–ô
        print("üí° DEBUG: –¢–æ–≤–∞—Ä –æ–ø–ª–∞—á–µ–Ω–∏–π, –æ–¥–µ—Ä–∂—É–≤–∞—á –ø–ª–∞—Ç–∏—Ç—å –¢–Ü–õ–¨–ö–ò –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É")
        
        method_properties = {
            "NewAddress": "1",  # –ù–æ–≤–∏–π –æ–¥–µ—Ä–∂—É–≤–∞—á
            "PayerType": "Recipient",  # –ü–ª–∞—Ç–Ω–∏–∫ - –æ–¥–µ—Ä–∂—É–≤–∞—á (—Ç—ñ–ª—å–∫–∏ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É!)
            "PaymentMethod": "Cash",  # –ì–æ—Ç—ñ–≤–∫–∞ (–∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∞ –Ω–µ –∑–∞ —Ç–æ–≤–∞—Ä!)
            "CargoType": "Parcel",  # –¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É - –ø–æ—Å–∏–ª–∫–∞
            "ServiceType": "WarehouseWarehouse",  # –°–∫–ª–∞–¥-—Å–∫–ª–∞–¥
            "OptionsSeat": [{"volumetricVolume": "0.1", "volumetricWidth": "10", "volumetricLength": "10", "volumetricHeight": "10", "weight": "1"}],  # –û–±–æ–≤'—è–∑–∫–æ–≤–æ!
            
            # –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫
            "CitySender": order_data.get('sender_city_ref', ''),
            "Sender": order_data.get('sender_ref', ''),
            "SenderAddress": order_data.get('sender_address_ref', ''),
            "ContactSender": order_data.get('sender_contact_ref', ''),
            "SendersPhone": order_data.get('sender_phone', ''),
            
            # –û–¥–µ—Ä–∂—É–≤–∞—á
            "CityRecipient": order_data.get('recipient_city_ref', ''),
            "RecipientAddress": order_data.get('recipient_warehouse_ref', ''),
            "RecipientName": order_data.get('recipient_name', ''),
            "RecipientType": "PrivatePerson",
            "RecipientsPhone": order_data.get('recipient_phone', ''),
            
            # –í–∞–Ω—Ç–∞–∂
            "Weight": str(order_data.get('weight', '1')),
            "SeatsAmount": str(order_data.get('seats_amount', '1')),
            "Description": order_data.get('description', '–¢–æ–≤–∞—Ä'),
            "Cost": str(order_data.get('cost', '100')),
            
            # –î–∞—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            "DateTime": order_data.get('date', ''),
        }
        
        # –ó–≤–æ—Ä–æ—Ç–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (–Ω–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂)
        if order_data.get('backward_delivery_money'):
            method_properties.update({
                "BackwardDeliveryData": [{
                    "PayerType": "Recipient",
                    "CargoType": "Money",
                    "RedeliveryString": str(order_data['backward_delivery_money'])
                }]
            })
        
        data = self._make_request(
            model_name="InternetDocument",
            called_method="save",
            method_properties=method_properties
        )
        
        if data and len(data) > 0:
            return {
                'ref': data[0].get('Ref', ''),
                'cost_on_site': data[0].get('CostOnSite', ''),
                'estimated_delivery_date': data[0].get('EstimatedDeliveryDate', ''),
                'int_doc_number': data[0].get('IntDocNumber', ''),  # –ù–æ–º–µ—Ä –¢–¢–ù
                'type_document': data[0].get('TypeDocument', '')
            }
        
        return None
    
    def get_counterparties(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ (–≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫—ñ–≤)
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤
        """
        data = self._make_request(
            model_name="Counterparty",
            called_method="getCounterparties",
            method_properties={"CounterpartyProperty": "Sender"}
        )
        
        if not data:
            return []
        
        counterparties = []
        for item in data:
            counterparties.append({
                'ref': item.get('Ref', ''),
                'description': item.get('Description', ''),
                'first_name': item.get('FirstName', ''),
                'last_name': item.get('LastName', ''),
                'middle_name': item.get('MiddleName', ''),
                'ownership_form': item.get('OwnershipForm', '')
            })
        
        return counterparties
    
    def get_counterparty_addresses(self, counterparty_ref):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        
        Args:
            counterparty_ref (str): Ref –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å
        """
        data = self._make_request(
            model_name="Counterparty",
            called_method="getCounterpartyAddresses",
            method_properties={"Ref": counterparty_ref}
        )
        
        if not data:
            return []
        
        addresses = []
        for item in data:
            addresses.append({
                'ref': item.get('Ref', ''),
                'description': item.get('Description', ''),
                'city_ref': item.get('CityRef', ''),
                'city_description': item.get('CityDescription', ''),
                'street_ref': item.get('StreetRef', ''),
                'building_number': item.get('BuildingNumber', '')
            })
        
        return addresses
    
    def get_counterparty_contact_persons(self, counterparty_ref):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –æ—Å—ñ–± –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        
        Args:
            counterparty_ref (str): Ref –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –æ—Å—ñ–±
        """
        data = self._make_request(
            model_name="Counterparty",
            called_method="getCounterpartyContactPersons",
            method_properties={"Ref": counterparty_ref}
        )
        
        if not data:
            return []
        
        contacts = []
        for item in data:
            contacts.append({
                'ref': item.get('Ref', ''),
                'description': item.get('Description', ''),
                'phones': item.get('Phones', '')
            })
        
        return contacts
    
    def get_document_tracking(self, ttn_number):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¢–¢–ù
        
        Args:
            ttn_number (str): –ù–æ–º–µ—Ä –¢–¢–ù
        
        Returns:
            dict: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –∞–±–æ None
        """
        data = self._make_request(
            model_name="TrackingDocument",
            called_method="getStatusDocuments",
            method_properties={"Documents": [{"DocumentNumber": ttn_number}]}
        )
        
        if not data or len(data) == 0:
            return None
        
        item = data[0]
        
        return {
            'number': item.get('Number', ''),
            'status': item.get('Status', ''),
            'status_code': item.get('StatusCode', ''),
            'recipient_date_time': item.get('RecipientDateTime', ''),
            'recipient_full_name': item.get('RecipientFullName', ''),
            'warehouse_recipient': item.get('WarehouseRecipient', ''),
            'city_sender': item.get('CitySender', ''),
            'city_recipient': item.get('CityRecipient', ''),
            'date_created': item.get('DateCreated', ''),
            'date_scan': item.get('DateScan', ''),
            'scheduled_delivery_date': item.get('ScheduledDeliveryDate', ''),
            'actual_delivery_date': item.get('ActualDeliveryDate', ''),
            'redelivery_num': item.get('RedeliveryNum', ''),
            'phone_recipient': item.get('PhoneRecipient', ''),
        }


# Singleton instance
nova_poshta_api = NovaPoshtaAPI()
