#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –æ–ø–ª–∞—Ç–∏

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python test_payment_integration.py
"""

import os
import sys
import django

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Django
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Laskazoo.settings')
django.setup()

from apps.orders.models import Order, PaymentTransaction
from django.contrib.auth import get_user_model

User = get_user_model()


def print_section(title):
    """–ö—Ä–∞—Å–∏–≤–æ –≤–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó"""
    print('\n' + '=' * 80)
    print(f' {title}')
    print('=' * 80)


def test_database_connection():
    """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print_section('–¢–ï–°–¢ 1: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö')
    try:
        users_count = User.objects.count()
        orders_count = Order.objects.count()
        transactions_count = PaymentTransaction.objects.count()
        
        print(f'‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–µ')
        print(f'   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}')
        print(f'   –ó–∞–º–æ–≤–ª–µ–Ω—å: {orders_count}')
        print(f'   –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {transactions_count}')
        return True
    except Exception as e:
        print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}')
        return False


def test_models():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π Order —Ç–∞ PaymentTransaction"""
    print_section('–¢–ï–°–¢ 2: –ú–æ–¥–µ–ª—ñ')
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Order –º–∞—î –ø–æ–ª—è payment
        order_fields = [f.name for f in Order._meta.get_fields()]
        required_fields = ['payment_method', 'payment_status', 'payment_id']
        
        print('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–ª—ñ–≤ Order:')
        for field in required_fields:
            if field in order_fields:
                print(f'   ‚úÖ {field} - –ø—Ä–∏—Å—É—Ç–Ω—î')
            else:
                print(f'   ‚ùå {field} - –í–Ü–î–°–£–¢–ù–Ñ!')
                return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ PaymentTransaction
        print('\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª—ñ PaymentTransaction:')
        transaction_fields = [f.name for f in PaymentTransaction._meta.get_fields()]
        required_trans_fields = ['order', 'transaction_type', 'status', 'amount', 'payment_system']
        
        for field in required_trans_fields:
            if field in transaction_fields:
                print(f'   ‚úÖ {field} - –ø—Ä–∏—Å—É—Ç–Ω—î')
            else:
                print(f'   ‚ùå {field} - –í–Ü–î–°–£–¢–ù–Ñ!')
                return False
        
        print('\n‚úÖ –í—Å—ñ –º–æ–¥–µ–ª—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        return True
    except Exception as e:
        print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}')
        return False


def test_payment_choices():
    """–¢–µ—Å—Ç choices –¥–ª—è –æ–ø–ª–∞—Ç–∏"""
    print_section('–¢–ï–°–¢ 3: Choices –¥–ª—è –æ–ø–ª–∞—Ç–∏')
    try:
        print('–î–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏:')
        for code, name in Order.PAYMENT_METHOD_CHOICES:
            print(f'   üí≥ {code}: {name}')
        
        print('\n–°—Ç–∞—Ç—É—Å–∏ –æ–ø–ª–∞—Ç–∏:')
        payment_statuses = ['pending', 'paid', 'failed']
        for status in payment_statuses:
            print(f'   üü¢ {status}')
        
        print('\n‚úÖ Choices –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        return True
    except Exception as e:
        print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ choices: {e}')
        return False


def test_create_transaction():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    print_section('–¢–ï–°–¢ 4: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó')
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        user = User.objects.first()
        if not user:
            print('‚ö†Ô∏è  –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ë–î. –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–ø–æ—á–∞—Ç–∫—É.')
            return False
        
        order = Order.objects.filter(user=user).first()
        if not order:
            print('‚ö†Ô∏è  –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å —É –ë–î. –°—Ç–≤–æ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É.')
            return False
        
        print(f'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id}')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = PaymentTransaction.objects.create(
            order=order,
            transaction_type='payment',
            status='initiated',
            amount=order.total_amount,
            currency='UAH',
            payment_system='portmone'
        )
        
        print(f'‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é #{transaction.id} —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ')
        print(f'   –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order.order_number or order.id}')
        print(f'   –°—É–º–∞: {transaction.amount} {transaction.currency}')
        print(f'   –°—Ç–∞—Ç—É—Å: {transaction.status}')
        
        # –¢–µ—Å—Ç—É—î–º–æ –º–µ—Ç–æ–¥–∏
        transaction.mark_as_success({'test': 'data'})
        print(f'   ‚úÖ mark_as_success() –ø—Ä–∞—Ü—é—î')
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction.delete()
        print(f'   üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ')
        
        return True
    except Exception as e:
        print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}')
        import traceback
        traceback.print_exc()
        return False


def test_saletype_logic():
    """–¢–µ—Å—Ç –ª–æ–≥—ñ–∫–∏ saletype"""
    print_section('–¢–ï–°–¢ 5: –õ–æ–≥—ñ–∫–∞ saletype –¥–ª—è JSON –µ–∫—Å–ø–æ—Ä—Ç—É')
    try:
        user = User.objects.first()
        if not user:
            print('‚ö†Ô∏è  –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ë–î')
            return False
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç–∏
        cash_order = Order.objects.filter(payment_method='cash').first()
        card_order = Order.objects.filter(payment_method='card_online').first()
        
        if cash_order:
            print(f'üíµ –ì–æ—Ç—ñ–≤–∫–∞: saletype = "{cash_order.sale_type}"')
            if cash_order.sale_type == '1':
                print('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ (saletype = "1")')
            else:
                print(f'   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û! –ú–∞—î –±—É—Ç–∏ "1", –∞ –Ω–µ "{cash_order.sale_type}"')
        
        if card_order:
            print(f'üí≥ –ö–∞—Ä—Ç–∫–∞: saletype = "{card_order.sale_type}"')
            if card_order.sale_type == '2':
                print('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ (saletype = "2")')
            else:
                print(f'   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û! –ú–∞—î –±—É—Ç–∏ "2", –∞ –Ω–µ "{card_order.sale_type}"')
        
        if not cash_order and not card_order:
            print('‚ö†Ô∏è  –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –û—Ñ–æ—Ä–º—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
        
        return True
    except Exception as e:
        print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ saletype: {e}')
        return False


def test_admin_registration():
    """–¢–µ—Å—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ Django Admin"""
    print_section('–¢–ï–°–¢ 6: Django Admin')
    try:
        from django.contrib import admin
        from apps.orders.models import PaymentTransaction
        
        if admin.site.is_registered(PaymentTransaction):
            print('‚úÖ PaymentTransaction –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ admin')
        else:
            print('‚ùå PaymentTransaction –ù–ï –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ admin')
            return False
        
        return True
    except Exception as e:
        print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ admin: {e}')
        return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print('\n')
    print('üöÄ ' + '=' * 76)
    print('   –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –û–ü–õ–ê–¢–ò –ö–ê–†–¢–ö–û–Æ')
    print('=' * 80)
    
    tests = [
        ('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î', test_database_connection),
        ('–ú–æ–¥–µ–ª—ñ', test_models),
        ('Payment Choices', test_payment_choices),
        ('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó', test_create_transaction),
        ('–õ–æ–≥—ñ–∫–∞ saletype', test_saletype_logic),
        ('Django Admin', test_admin_registration),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f'\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ "{test_name}": {e}')
            results.append((test_name, False))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print_section('–ü–Ü–î–°–£–ú–û–ö')
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = '‚úÖ –ü–†–û–ô–î–ï–ù–û' if result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û'
        print(f'{status:<20} | {test_name}')
    
    print('\n' + '=' * 80)
    print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ')
    
    if passed == total:
        print('üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û! –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –æ–ø–ª–∞—Ç–∏ –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.')
    else:
        print('‚ö†Ô∏è  –Ñ –ø–æ–º–∏–ª–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –º—ñ–≥—Ä–∞—Ü—ñ—ó:')
        print('   python manage.py makemigrations')
        print('   python manage.py migrate')
    
    print('=' * 80 + '\n')


if __name__ == '__main__':
    main()
